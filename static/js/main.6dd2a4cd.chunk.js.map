{"version":3,"sources":["index.js"],"names":["Square","props","state","value","clicked","bind","this","good","className","onClick","React","Component","Board","i","squares","goodPos","includes","board","line","Array","fill","j","renderSquare","Game","history","square","lastStep","nextIsX","stepNo","isBold","isAscend","slice","length","lastPos","Object","calculateWinner","x","Math","floor","y","setState","concat","step","winnerPos","status","current","winner","dogfall","canWin","kinds","lines","checkIsDogfall","moves","map","move","desc","bold_desc","key","jumpTo","reverse","handleClick","changeOrder","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6dd2a4cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: null\r\n        };\r\n\r\n        this.clicked = this.clicked.bind(this);\r\n    }\r\n\r\n\r\n    render() {\r\n        if(this.props.good) {\r\n            return (\r\n                <button className=\"good-square\" onClick={ this.clicked }>\r\n                {this.props.value}\r\n                </button>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <button className=\"square\" onClick={ this.clicked }>\r\n                {this.props.value}\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n\r\n    clicked() {\r\n        this.props.onClick();\r\n    }\r\n\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square \r\n            value={ this.props.squares[i] }\r\n            onClick={ () => this.props.onClick(i) }\r\n            good={ this.props.goodPos ? this.props.goodPos.includes(i) : false }\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        let board, line;\r\n        board = new Array(3).fill(null);\r\n        for(let i = 0; i < 3; ++i) {\r\n            line = new Array(3).fill(null);\r\n            for(let j = 0; j < 3; ++j) {\r\n                line[j] = this.renderSquare(i*3+j);\r\n            }\r\n            board[i] = <div className=\"board-row\">{line}</div>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {board}\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                square: Array(9).fill(null),\r\n                lastStep: null\r\n            }],\r\n            nextIsX: true,\r\n            stepNo: 0,\r\n            isBold: null,\r\n            isAscend: false,\r\n            goodPos: null\r\n        }\r\n    }\r\n    \r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNo + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.square.slice();\r\n        const lastPos = new Object();\r\n\r\n        if(calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.nextIsX ? 'x' : 'o' ;\r\n        lastPos.x = Math.floor(i/3) + 1;\r\n        lastPos.y = i % 3 + 1;\r\n        this.setState({ \r\n            history: history.concat([{\r\n                square: squares,\r\n                lastStep: lastPos\r\n            }]),\r\n            nextIsX: !this.state.nextIsX,\r\n            stepNo: history.length,\r\n            isBold: null\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNo: step,\r\n            nextIsX: (step&1) === 0,\r\n            isBold: step\r\n        })\r\n    }\r\n\r\n    changeOrder() {\r\n        this.setState({isAscend: !this.state.isAscend});\r\n    }\r\n\r\n    setGoodPos(winnerPos) {\r\n        this.setState({\r\n            goodPos: winnerPos\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNo];\r\n        const winnerPos = calculateWinner(current.square);\r\n        const winner = winnerPos ? current.square[winnerPos[0]] : null;\r\n        const dogfall = checkIsDogfall(current.square);\r\n\r\n        // We cannot call this.setGoodPos() here. It will reach max depth.\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? \r\n                'Go to step #' + move + ': (' + step.lastStep.x + ',' + step.lastStep.y + ')':\r\n                'Go to the beginning';\r\n            if(this.state.isBold === move) {\r\n                const bold_desc = <b>{desc}</b>\r\n                return (\r\n                    <li key = { move }>\r\n                        <button onClick={()=>this.jumpTo(move)}>\r\n                            { bold_desc }\r\n                        </button>\r\n                    </li>\r\n                );\r\n            }\r\n            else {\r\n                return (\r\n                    <li key = { move }>\r\n                        <button onClick={()=>this.jumpTo(move)}>\r\n                            { desc }\r\n                        </button>\r\n                    </li>\r\n                ); \r\n            }\r\n        });\r\n\r\n        let status;\r\n        if(dogfall) {\r\n            // Try to add a super-link on RESTART ?\r\n            status = 'There is no winner, RESTART.';\r\n        }\r\n        else if(winner) {\r\n            status = 'winner is ' + winner;\r\n        }\r\n        else {\r\n            status = 'Next player: ' + (this.state.nextIsX ? 'x' : 'o');\r\n        }\r\n\r\n        if(this.state.isAscend) moves.reverse();\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <Board \r\n                squares = { current.square }\r\n                onClick = { (i) => this.handleClick(i) }\r\n                goodPos = { winnerPos }\r\n            />\r\n            </div>\r\n            <div className=\"game-info\">\r\n            <div>{ status }</div>\r\n            <ol>{ moves }</ol>\r\n            <button onClick={() => this.changeOrder()}>\r\n                { this.state.isAscend ? 'Descending Order' : 'Ascending Order' }\r\n            </button>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n<Game />,\r\ndocument.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return [a, b, c];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n//TODO: This algorithm can be improved.\r\nfunction checkIsDogfall(squares) {\r\n\r\n    let canWin = false;\r\n    let kinds = new Array(2).fill(false);\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    for(let i = 0; i < lines.length; ++i) {\r\n        const line = lines[i];\r\n        for(let j = 0; j < 3; ++j) {\r\n            switch (squares[line[j]]) {\r\n                case 'x':\r\n                    kinds[0] = true;\r\n                    break;\r\n                case 'o':\r\n                    kinds[1] = true;\r\n                    break;\r\n                default:\r\n                    continue;\r\n            } \r\n        }\r\n        if(kinds[0] && kinds[1]) {\r\n            kinds = new Array(2).fill(false);\r\n            continue;\r\n        }\r\n        else {\r\n            canWin = true;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    if(canWin) return false;\r\n    else return true;\r\n\r\n}\r\n\r\nfunction checkIsFullFilled(squares) {\r\n    let cnt = 0;\r\n    for(let i = 0; i < 9; ++i) {\r\n        if(squares[i])++cnt;\r\n        else return false;\r\n    }\r\n    if(cnt === 9) return true;\r\n    else return false;\r\n}\r\n"],"sourceRoot":""}